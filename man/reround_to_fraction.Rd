% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reround-to-fraction.R
\name{reround_to_fraction}
\alias{reround_to_fraction}
\title{Generalized rounding to the nearest fraction of a specified denominator}
\usage{
reround_to_fraction(
  x = NULL,
  denominator = 1,
  digits = Inf,
  rounding = "up_or_down",
  threshold = NULL,
  symmetric = FALSE
)
}
\arguments{
\item{x}{Numeric. Vector of possibly original values.}

\item{denominator}{Numeric (>= 1) . \code{x} will be rounded to the nearest
fraction of \code{denominator}. Default is \code{1}.}

\item{digits}{Numeric (whole numbers). If specified, the values resulting
from fractional rounding will subsequently be rounded to that many digits.
If set to \code{"auto"}, it internally becomes \code{ceiling(log10(denominator)) + 1}, as in \code{janitor::round_to_fraction()}. Default is \code{Inf}, in which case
there is no subsequent rounding.}

\item{rounding, threshold, symmetric}{More arguments passed down to
\code{reround()}.}
}
\value{
Numeric vector of the same length as \code{x} unless \code{rounding} is either
of \code{"up_or_down"}, \code{"up_from_or_down_from"}, and \code{"ceiling_or_floor"}. In
these cases, it will always have length 2.
}
\description{
\code{reround_to_fraction()} rounds reconstructed numbers the way
they were supposedly rounded before, as \code{reround()} does. Unlike
\code{reround()}, however, it can round them to any fractional denominator.

For example, if that denominator is \code{4}, numbers will be rounded to \code{0},
\code{0.25}, \code{0.50}, \code{0.75}, or \code{1}. You can choose to round them to some digit
afterwards. This is regular, integer rounding, but with all of the options
that \code{reround()} provides.

The present function was inspired by \code{janitor::round_to_fraction()}. It is
a blend between \code{reround()} and \code{round_to_fraction()}.
}
\examples{
# `0.4` is rounded to `0` if `denominator` is `1`,
# which is the usual integer rounding...
reround_to_fraction(0.4, denominator = 1, rounding = "even")

# ...but if `denominator` is `2`, it rounds to the nearest
# fraction of 2:
reround_to_fraction(0.4, denominator = 2, rounding = "even")

# Likewise with fractions of 3:
reround_to_fraction(0.25, denominator = 3, rounding = "even")

# The default for `rounding` is to round
# both up and down, as in `reround()`:
reround_to_fraction(0.4, denominator = 2)

# These two rounding procedures differ
# at the tie points:
reround_to_fraction(0.25, denominator = 2)
}
\seealso{
\code{reround()}, which the function wraps, and
\code{janitor::round_to_fraction()}, part of which it copies.
}
