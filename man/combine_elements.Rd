% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combine-elements.R
\name{combine_elements}
\alias{combine_elements}
\title{Combine vector elements to given length}
\usage{
combine_elements(x, n, prefix = "Var")
}
\arguments{
\item{x}{A vector with elements to combine.}

\item{n}{Integer of length 1. Number of elements in each combination, and
thus, number of columns in the resulting data frame.}

\item{prefix}{String. Start of every column in the output tibble, before the
column number. Default is \code{"Var"}.}
}
\value{
A tibble (data frame).
}
\description{
\emph{Note: This function is not yet part of an established workflow,
but will be key to implementing GRIMMER (granularity-related inconsistency
of means mapped to error repeats), i.e., GRIM-testing applied to standard
deviations instead of means. At that point, it will essentially be a helper
function, so it is not exported now, and unlikely to be exported in the
future.}

\code{combine_elements()} combines a vector's elements with each other. The
length of the combinations is explicitly specified.

Combinations are represented by rows in the resulting data frame. Each row
is a unique combination (unique in terms of its values themselves, not just
the sequence of its values).
}
\details{
This function is part of scrutiny's GRIMMER implementation. It
closely mimics the behavior of the Python function
\href{https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement}{\code{itertools.combinations_with_replacement()}}.
The most important difference is that \code{combine_elements()} organizes
results in a data frame, with rows corresponding to Python's tuples. The
row order might differ from the order of tuples in the original.
}
\examples{
# Define example vector:
abc <- c("a", "b", "c")

# Get combinations of vector `x` with length `n`,
# with one combination per row:
combine_elements(x = abc, n = 2)

# `n` is the length of each combination, and
# therefore the number of columns. Indirectly,
# it determines the number of combination-rows:
combine_elements(x = abc, n = 3)
}
\seealso{
\code{expand.grid()}, which the function wraps, the
\href{https://purrr.tidyverse.org/reference/cross.html}{\code{cross} family of
functions} from purrr and, for functional programming with combinations,
the \href{https://crossmap.rossellhayes.com/index.html}{crossmap} package.
}
